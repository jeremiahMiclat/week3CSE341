const Schema = require('../Schemas/contacts')

// fetch all
const getAll = async (req, res) => {
    try {
        // #swagger.tags = ['Contacts']
        // #swagger.description = 'Displays all contacts.'
        const contacts = await Schema.find()
        res.status(200).json(contacts)

    } catch (e) {
        return res.status(500).json({ message: e.message })
    }
}
// fetch by id
const getOne = async (req, res) => {
    // #swagger.tags = ['Contacts']
    // #swagger.description = 'Fetching a contact through _id from mongodb collection.'
    // #swagger.parameters['id'] = { description: 'ID of contact.' }
    try {
        const contacts = await Schema.findById(req.params.id)
        res.status(200).json(contacts)
        /* #swagger.responses[200] = { 
              schema: { $ref: "#/definitions/Contact" },
              description: 'Contact data fetched from collection in db.' 
       } */
    } catch (e) {
        return res.status(500).json({ message: e.message })
    }
}
// create
const addOne = async (req, res) => {
    // #swagger.tags = ['Contacts']
    // #swagger.description = 'Adding a new contact to the collection'

    const contact = new Schema({
        firstName: req.body.firstName,
        lastName: req.body.lastName,
        email: req.body.email,
        favoriteColor: req.body.favoriteColor,
        birthday: req.body.birthday,
    })

    /* #swagger.parameters['contact'] = {
               in: 'body',
               description: 'Information of a contact. All fields are required',
               required: true,
               schema: { $ref: "#/definitions/AddContact" }
        } */
    try {
        const savedContact = await contact.save()
        // eslint-disable-next-line no-underscore-dangle
        res.status(201).json(savedContact._id)
        /* #swagger.responses[201] = { 
            schema: { $ref: "#/definitions/contact_id" },
            description: 'Returns contact "_id" autogenerated by mongodb' 
       } */
    } catch (e) {
        res.status(500).json({ message: e.message })
    }
}
// update
const updateOne = async (req, res) => {
    // #swagger.tags = ['Contacts']
    // #swagger.description = 'Updating a contact from mongodb collection through _id.'
    // #swagger.parameters['id'] = { description: 'ID of contact to be updated.' }
    const contact = new Schema({
        _id: req.params.id,
        firstName: req.body.firstName,
        lastName: req.body.lastName,
        email: req.body.email,
        favoriteColor: req.body.favoriteColor,
        birthday: req.body.birthday,
    })
    /* #swagger.parameters['contact'] = {
               in: 'body',
               description: 'Information of a contact being updated. All fields are required',
               required: true,
               schema: { $ref: "#/definitions/AddContact" }
        } */
    try {
        const updatedContact = await Schema.findByIdAndUpdate(req.params.id, { $set: contact }, { new: true })
        res.status(204).json(updatedContact)
        /* #swagger.responses[204] = { 
            schema: { $ref: "#/definitions/Contact" },
            description: 'Returns newly update contact in this format' 
       } */
    } catch (e) {
        return res.status(500).json({ message: e.message })
    }
}
// delete
const delOne = async (req, res) => {
    // #swagger.tags = ['Contacts']
    // #swagger.description = 'Deletes a contact'
    // #swagger.parameters['id'] = { description: 'ID of contact to be deleted.' }
    try {
        const removedContact = await Schema.deleteOne({ _id: req.params.id })
        res.status(200).json(removedContact)
        /* #swagger.responses[200] = { 
            schema: { $ref: "#/definitions/delRes" },
            description: 'Delete response' 
       } */
    } catch (e) {
        return res.status(500).json({ message: e.message })
    }
}



module.exports = { getAll, getOne, addOne, updateOne, delOne }